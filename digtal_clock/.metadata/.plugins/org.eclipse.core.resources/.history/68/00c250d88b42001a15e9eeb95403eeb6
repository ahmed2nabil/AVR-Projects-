/*
 * digc.c
 *
 *  Created on: Jan 28, 2020
 *      Author: 20114
 */
#include<avr/io.h>
#include<util/delay.h>
#include<avr/interrupt.h>
unsigned char g_flag=0;
unsigned char g_tick=0;
unsigned char g_sec=0;
unsigned char g_min=0;
unsigned char g_hour=0;
#define NUMBER_OF_OVERFLOWS_PER_SECOND 4

ISR(TIMER0_OVF_vect){
g_tick++;
	if (g_tick == NUMBER_OF_OVERFLOWS_PER_SECOND){
		g_flag=1;
		g_tick=0;
	}

}
ISR(INT0_vect){
	g_sec=0;
	g_min=0;
	g_hour=0;
}
void int0_init(void){
	MCUCR |= (1<<ISC01) |(1<<ISC00);
	GICR |= (1<<INT0);

}
/* Description :
 * For clock=1Mhz and prescale F_CPU/1024 every count will take 1ms
 * so put initial timer counter=0  0 --> 255 (256ms per overflow)
 * so we need timer to overflow 2 times to get a 0.5 second
 */
void timer0_init_normal_mode(void)
{
	TCNT0 = 0; //timer initial value
	TIMSK |= (1<<TOIE0); //enable overflow interrupt
	/* Configure the timer control register
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
}
int main(){
	DDRC |= 0x0F;
PORTC &= 0xF0;
DDRA =0xFF;
PORTA= 0x00;
DDRD &= ~(1<<PD2);
// enable global interrupts in MC.
SREG |= (1<<7);
// start timer0 to generate compare interrupt every 250 MiliSeconds
timer0_init_normal_mode();
while(1){
	if(g_flag==1)
	{
		g_sec++;
	    if (g_sec==60){
		g_sec=0;
				g_min++;
	    			}
	    if(g_min==60){
	    	g_min=0;
	    	g_hour++;
	    			}
	    if(g_hour==24){
	    	g_hour==0;
	    }
	    g_flag=0;
	}
	else {
			PORTA =(PORTA & 0xC0)|( 0x01);
			PORTC= (PORTC & 0xF0) | (g_sec %10);
			_delay_ms(2);
			PORTA =(PORTA & 0xC0)|( 0x02);
			PORTC= (PORTC & 0xF0) |(g_sec /10);
			_delay_ms(2);
				PORTA =(PORTA & 0xC0)|( 0x04);
				PORTC= (PORTC & 0xF0) |(g_min %10);
				_delay_ms(2);
					PORTA =(PORTA & 0xC0)|( 0x08);
					PORTC= (PORTC & 0xF0) |(g_min%10);
					_delay_ms(2);
					PORTA =(PORTA & 0xC0)|( 0x10);
					PORTC= (PORTC & 0xF0) |(g_hour%10);
					_delay_ms(2);
					PORTA =(PORTA & 0xC0)|( 0x20);
					PORTC= (PORTC & 0xF0) |(g_hour%10);
					_delay_ms(2);
		}
	}
}

